1. Write program using functions for binary tree traversals: Pre-order, In-order and Postorder using recursive approach.

#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};
void preorder(Node* root){
    if(root!=nullptr){
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }
    return;
}
void postorder(Node* root){
    if(root!=nullptr){
        postorder(root->left);
        postorder(root->right);
        cout<<root->data<<" ";
    }
    return;
}
void inorder(Node* root){
    if(root!=nullptr){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
    return;
}
void deleteTree(Node* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    Node* root = new Node(16);
    root->left = new Node(8);
    root->right = new Node(25);
    root->right->right = new Node(42);
    root->right->right->right = new Node(62);
    root->right->right->right->left = new Node(49);
    root->right->right->right->left->right = new Node(58);
    preorder(root);
    cout<<endl;
    postorder(root);
    cout<<endl;
    inorder(root);
    cout<<endl;
    deleteTree(root);
    
    return 0;
}

=============================================================================================================================

2. Implement following functions for Binary Search Trees
(a) Search a given item (Recursive & Non-Recursive)

Node* search_rec(Node* root, int val) {
    if (root == nullptr || root->data == val) {
        if (root) {
            cout << "Element " << val << " found in the BST." << endl;
        } else {
            cout << "Element " << val << " not found in the BST." << endl;
        }
        return root;
    }

    else if (val < root->data) {
        return search_rec(root->left, val);
    }
    else { 
        return search_rec(root->right, val);
    }
}


Node* search_loop(Node* root, int val) {
    Node* temp=root;
    while(temp!=nullptr){
    if (temp->data == val) {
    cout << "Element " << val << " found in the BST." << endl;
        return temp;
    }
    else if (val < temp->data) {
       temp=temp->left;
    }
    else { 
       temp=temp->right;
        }
    }
    cout<<"Element not found:("<<endl;
    return nullptr;
}


(b) Maximum element of the BST

   Node* Max(Node* root){
    if (root == nullptr) {
        cout << "The tree is empty. Max element not found." << endl;
        return nullptr;
    }
    Node* temp = root;
    while(temp->right != nullptr){
        temp = temp->right;
    }
    
    cout << "Max element is " << temp->data << endl;
    return temp;
}

(c) Minimum element of the BST
    
Node* Min(Node* root){
    if (root == nullptr) {
        cout << "The tree is empty. Min element not found." << endl;
        return nullptr;
    }
    Node* temp = root;
    while(temp->left != nullptr){
        temp = temp->left;
    }
    
    cout << "Min element is " << temp->data << endl;
    return temp;
}

(d) In-order successor of a given node the BST
(e) In-order predecessor of a given node the BST 

#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};
void inorder(Node* root){
    if(root!=nullptr){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
    return;
}
Node* Min(Node* root){
    if (root == nullptr) {
        cout << "The tree is empty. Min element not found." << endl;
        return nullptr;
    }
    Node* temp = root;
    while(temp->left != nullptr){
        temp = temp->left;
    }
    
    cout << "Min element is " << temp->data << endl;
    return temp;
}
Node* Max(Node* root){
    if (root == nullptr) {
        cout << "The tree is empty. Max element not found." << endl;
        return nullptr;
    }
    Node* temp = root;
    while(temp->right != nullptr){
        temp = temp->right;
    }
    
    cout << "Max element is " << temp->data << endl;
    return temp;
}

Node* succ(Node* root, int ele){
    Node* successor = nullptr;
    Node* current = root;
    while (current != nullptr) {
        if (ele < current->data) {
            successor = current;  // potential successor
            current = current->left;
        } else if (ele > current->data) {
            current = current->right;
        } else {
            // Found the node
            if (current->right != nullptr) {
                successor = Min(current->right);
            }
            break;
        }
    }

    return successor;
}

Node* prede(Node* root, int ele){
    Node* predeccessor = nullptr;
    Node* current = root;
    while (current != nullptr) {
        if (ele < current->data) {
            current = current->left;
        } else if (ele > current->data) {
            predeccessor=current;
            current = current->right;
        } else {
            // Found the node
            if (current->left != nullptr) {
                predeccessor = Max(current->left);
            }
            break;
        }
    }

    return predeccessor;
}
void deleteTree(Node* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    Node* root = new Node(16);
    root->left = new Node(8);
    root->right = new Node(25);
    root->right->right = new Node(42);
    root->right->right->right = new Node(62);
    root->right->right->right->left = new Node(49);
    root->right->right->right->left->right = new Node(58);
    inorder(root);
    cout<<endl<<succ(root,58)->data<<endl;
    cout<<endl<<prede(root,58)->data<<endl;
    deleteTree(root);
    
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

void inorder(Node* root){
    if(root != nullptr){
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

Node* create(Node* root, int val){
    if (root == nullptr) return new Node(val);

    Node* curr = root;
    Node* parent = nullptr;
    while(curr != nullptr){
        parent = curr;
        if(val < curr->data){
            curr = curr->left;
        }
        else if(val > curr->data){
            curr = curr->right;
        }
        else {
            return root;
        }
    }
    if(val < parent->data){
        parent->left = new Node(val);
    }
    else {
        parent->right = new Node(val);
    }
    return root;
}

void deleteTree(Node* root){
    if(root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    Node* root = nullptr;
    root = create(root, 16);
    root = create(root, 23);
    root = create(root, 3);

    cout << "Inorder traversal: ";
    inorder(root);
    cout << endl;

   
    deleteTree(root);

    return 0;
}
