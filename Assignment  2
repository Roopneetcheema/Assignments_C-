------------------------------------------------------------------------------------------------------------------------------------------------------------
1.

#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}

void linearSearch(int *arr, int ele, int len)
{
    for (int i = 0; i < len; i++)
    {
        if (arr[i] == ele)
        {
            cout << "Element " << ele << " found at position " << i + 1 << endl;
        }
    }
}

void binarySearch(int* arr, int len, int ele) {
    int low = 0, high = len - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2; 

        if (arr[mid] == ele) {
           cout << "Element " << ele << " found at position " << mid << endl;
           break;
        }
        else if (arr[mid] < ele) {
            low = mid + 1; 
        }
        else {
            high = mid - 1; 
        }
        
          cout << "Element " << ele << " not found " << endl;
    }

}
int main() {
    int arr[] = {11,12,13,14,15,16,17};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    linearSearch(arr, 13,  len);
    binarySearch( arr,  len, 12) ;
  
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
2.

//  Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent 
//elements if they are in wrong order. Code the Bubble sort with the following elements:  64 34 25 12 22 11 90
#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}
void sort(int* arr,int len){
     for(int i=0;i<len-1;i++){
         for(int j=0;j<len-1-i;j++){
       if(arr[j]>arr[j+1]){
           int temp=arr[j];
           arr[j]=arr[j+1];
           arr[j+1]=temp;
           //display(arr,len);
       }
         }
    }
    display(arr,len);
}
int main() {
    int arr[] = {64,34,25,12,22,11,90};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    sort(arr,len);
  
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
3.

//Design the Logic to Find a Missing Number in a Sorted Array. 
#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}

void findMissingNumber(int* arr, int len) {
    for (int i = 0; i < len - 1; i++) {
        if (arr[i + 1] - arr[i] != 1) {
            cout << "Missing number is: " << arr[i] + 1 << endl;
            return;
        }
    }
    cout << "No number is missing" << endl;
}

int main() {
    int arr[] = {11,12,14,15,16,17,18};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    findMissingNumber(arr, len) ;
    
  
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------
4.



