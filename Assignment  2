------------------------------------------------------------------------------------------------------------------------------------------------------------
1.

#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}

void linearSearch(int *arr, int ele, int len)
{
    for (int i = 0; i < len; i++)
    {
        if (arr[i] == ele)
        {
            cout << "Element " << ele << " found at position " << i + 1 << endl;
        }
    }
}

void binarySearch(int* arr, int len, int ele) {
    int low = 0, high = len - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2; 

        if (arr[mid] == ele) {
           cout << "Element " << ele << " found at position " << mid << endl;
           break;
        }
        else if (arr[mid] < ele) {
            low = mid + 1; 
        }
        else {
            high = mid - 1; 
        }
        
          cout << "Element " << ele << " not found " << endl;
    }

}
int main() {
    int arr[] = {11,12,13,14,15,16,17};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    linearSearch(arr, 13,  len);
    binarySearch( arr,  len, 12) ;
  
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
2.

//  Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent 
//elements if they are in wrong order. Code the Bubble sort with the following elements:  64 34 25 12 22 11 90
#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}
void sort(int* arr,int len){
     for(int i=0;i<len-1;i++){
         for(int j=0;j<len-1-i;j++){
       if(arr[j]>arr[j+1]){
           int temp=arr[j];
           arr[j]=arr[j+1];
           arr[j+1]=temp;
           //display(arr,len);
       }
         }
    }
    display(arr,len);
}
int main() {
    int arr[] = {64,34,25,12,22,11,90};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    sort(arr,len);
  
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
3.

//Design the Logic to Find a Missing Number in a Sorted Array. 
#include <iostream>
using namespace std;
void display(int* arr, int len){
    for(int i=0;i<len;i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
}

void findMissingNumber(int* arr, int len) {
    for (int i = 0; i < len - 1; i++) {
        if (arr[i + 1] - arr[i] != 1) {
            cout << "Missing number is: " << arr[i] + 1 << endl;
            return;
        }
    }
    cout << "No number is missing" << endl;
}

int main() {
    int arr[] = {11,12,14,15,16,17,18};
    int len = 7;
    cout << "Array is : ";
    display(arr,len);
    findMissingNumber(arr, len) ;
    
  
    return 0;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------
4.

a). 
#include <iostream>
#include <string>
using namespace std;
string concatenate(string s1, string s2){
    string s3= s1+s2;
    return s3;
}
int main() {
    string s1,s2;
   cout << "Enter String 1"<<endl;
   getline(cin,s1);
   cout << "Enter String 2"<<endl;
   getline(cin,s2);
   cout<<"Concatenated string is : "<< concatenate(s1,s2)<<endl;
  
    return 0;
}

-------------------------------------------------------------------------
b).
#include <iostream>
#include <string>
using namespace std;
string reverse(string s){
    int len=s.length();
    for(int i=0;i<len/2;i++){
        char temp=s[i];
        s[i]= s[len -1-i] ;
        s[len -1-i] = temp;
    }
    return s;
}
int main() {
    string s1,s2;
   cout << "Enter String "<<endl;
   getline(cin,s1);
 
   cout<<"Reversed string is : "<< reverse(s1)<<endl;
  
    return 0;
    
}
---------------------------------------------------------------------------
c). 
#include <iostream>
#include <string>
using namespace std;

string del_vowel(string s){
    int len=s.length();
    for(int i=0;i<len;i++){
        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){
              s.erase(i, 1); 
           i--;
        }
    }
    return s;
}
int main() {
    string s1,s2;
   cout << "Enter String "<<endl;
   getline(cin,s1);
 
   cout<<"String without vowels is : "<< del_vowel(s1)<<endl;
  
    return 0;
    
}

------------------------------------------------------------------------------------------

d).

#include <iostream>
#include <string>
using namespace std;

string sort_s(string s){
    int len=s.length();
    for(int j=0;j<len-1;j++){
    for(int i=0;i<len-1-j;i++){
       if(s[i]>s[i+1]){
           char temp= s[i];
           s[i]=s[i+1];
           s[i+1]=temp;
           //cout<<s<<endl;
       }
    }
    }
    return s;
}
int main() {
    string s1,s2;

   cout << "Enter String "<<endl;
   getline(cin,s1);
    cout<<sort_s(s1)<<endl;
  
    return 0;
    
}

e).

#include <iostream>
#include <string>
using namespace std;

char u_to_l(char s){
    s=s+32;
    
    return s;
}
int main() {
  char r;
   cout << "Enter character "<<endl;
   cin>>r;
cout<<u_to_l(r)<<endl;
  
    return 0;
    
}

------------------------------------------------------------------------------------------------------------
8.

#include <iostream>
#include <string>
using namespace std;
int distinct(int* arr,int len){
    int count=0;
    for(int i=0;i<len;i++){
    if(arr[i]!=arr[i+1]){
        count++;
      
    }
    }
    return count;
}
int main() {
   int arr[]={1,2,2,3,4,4,4,5,5,6,7};
   int len=11;
   cout<<distinct(arr,len);
  return 0;
    
}

---------------------------------------------------------------------------------------------------------------

7.
#include <iostream>
#include <vector>
using namespace std;

vector<int> input(int n){

	vector<int> arr(n);
	
	for(int i=0; i<n; i++){

	cout<<"Enter element "<<i+1<<" : ";
	cin>>arr[i];
		cout<<endl;
	}
	
		return arr;
	}
	void output(int n, vector<int> arr){
		for(int i=0; i<n; i++){
		cout<<arr[i]<<"  ";  
	}
	
	cout<<endl;
}
int inversion(vector<int> arr,int n){
	int count=0;
	for(int i=0;i<n;i++){
		for(int j=i+1;j<n;j++){
			if(arr[i]>arr[j]){
				count++;
			}
		}
	}
	return count;
}
int main(){
	int n=7;
    vector<int> a=	input(n);
	output(n,a);
	cout<<inversion(a,n);
	return 0;
}       

